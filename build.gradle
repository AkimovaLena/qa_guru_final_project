plugins {
    id 'java-library'
    id "io.freefair.lombok" version "8.6"
    id 'io.qameta.allure' version '2.11.0'
}

def restAssuredVersion = "5.3.0",
    allureVersion = "2.27.0",
    jUnitVersion = "5.10.2",
    jsonSchema = "5.3.0",
    selenideVersion = "7.4.0",
    ownerVersion = "1.0.12",
    slf4jVersion = "2.0.7",
    javaFakerVersion = "1.0.2",
    appiumVersion = "8.4.0",
    commonsVersion = "2.11.0",
    assertjCoreVersion = "3.25.3"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

repositories {
    mavenCentral()
}

compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation(
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.junit.jupiter:junit-jupiter:$jUnitVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$jsonSchema",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "org.assertj:assertj-core:$assertjCoreVersion",
            "com.github.javafaker:javafaker:$javaFakerVersion",
            "commons-io:commons-io:$commonsVersion",
            "com.codeborne:selenide:$selenideVersion",
            "io.appium:java-client:$appiumVersion",
    )
}


tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties(System.getProperties())
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava {
    options.encoding = 'UTF-8'
}

task api(type: Test) {
    useJUnitPlatform {
        includeTags("api")
    }
}

task ui(type: Test) {
    useJUnitPlatform {
        includeTags("ui")
    }
}

task cart(type: Test) {
    useJUnitPlatform {
        includeTags("cart")
    }
}

task catalog(type: Test) {
    useJUnitPlatform {
        includeTags("catalog")
    }
}


task main_page(type: Test) {
    useJUnitPlatform {
        includeTags("main_page")
    }
}
